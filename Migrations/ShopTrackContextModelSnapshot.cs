// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using ShopTracker.Data;
using System;

namespace ShopTracker.Migrations
{
    [DbContext(typeof(ShopTrackContext))]
    partial class ShopTrackContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ShopTracker.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(25);

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ShopTracker.Models.Currency", b =>
                {
                    b.Property<int>("CurrencyID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FullName")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .HasMaxLength(3);

                    b.HasKey("CurrencyID");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("ShopTracker.Models.Group", b =>
                {
                    b.Property<int>("GroupID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("PrefCurrID");

                    b.Property<int>("UserID");

                    b.HasKey("GroupID");

                    b.HasIndex("PrefCurrID");

                    b.HasIndex("UserID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ShopTracker.Models.Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Bought");

                    b.Property<int>("CategoryID");

                    b.Property<string>("Description");

                    b.Property<int>("MeasureID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("ItemID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("MeasureID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ShopTracker.Models.Measure", b =>
                {
                    b.Property<int>("MeasureID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("MeasureID");

                    b.ToTable("Measures");
                });

            modelBuilder.Entity("ShopTracker.Models.Purchase", b =>
                {
                    b.Property<int>("PurchaseID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CurrencyID");

                    b.Property<DateTime>("Date");

                    b.Property<int>("GroupID");

                    b.Property<int>("ItemID");

                    b.Property<decimal>("Price");

                    b.Property<string>("Provider");

                    b.Property<decimal>("Quantity");

                    b.Property<int?>("UserID");

                    b.HasKey("PurchaseID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("GroupID");

                    b.HasIndex("ItemID");

                    b.HasIndex("UserID");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("ShopTracker.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ShopTracker.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("RoleID");

                    b.Property<string>("Salt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ShopTracker.Models.Group", b =>
                {
                    b.HasOne("ShopTracker.Models.Currency", "PreferredCurrency")
                        .WithMany("Groups")
                        .HasForeignKey("PrefCurrID");

                    b.HasOne("ShopTracker.Models.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ShopTracker.Models.Item", b =>
                {
                    b.HasOne("ShopTracker.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShopTracker.Models.Measure", "Measure")
                        .WithMany("Items")
                        .HasForeignKey("MeasureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ShopTracker.Models.Purchase", b =>
                {
                    b.HasOne("ShopTracker.Models.Currency", "Currency")
                        .WithMany("Purchases")
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShopTracker.Models.Group", "Group")
                        .WithMany("Purchases")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShopTracker.Models.Item", "Item")
                        .WithMany("Purchases")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShopTracker.Models.User", "User")
                        .WithMany("Purchases")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("ShopTracker.Models.User", b =>
                {
                    b.HasOne("ShopTracker.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
